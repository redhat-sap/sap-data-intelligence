{
   "apiVersion": "template.openshift.io/v1",
   "kind": "Template",
   "message": null,
   "metadata": {
      "annotations": {
         "description": "Deploys a letsencrypt controller that secures OpenShift Routes with trusted certificates\nthat are periodically refreshed. By default, the controller monitors and secures only\nroutes in the SDI_NAMESPACE. That can be changed with the PROJECTS_TO_MONITOR parameter.\n",
         "openshift.io/display-name": "Job to deploy a letsencrypt controller.\n",
         "openshift.io/documentation-url": "https://access.redhat.com/articles/4324391",
         "openshift.io/provider-display-name": "Red Hat, Inc.",
         "sdi-observer/version": "0.1.27"
      },
      "name": "deploy-letsencrypt"
   },
   "objects": [
      {
         "apiVersion": "batch/v1",
         "kind": "Job",
         "metadata": {
            "labels": {
               "sdi-observer/version": "0.1.27"
            },
            "name": "deploy-letsencrypt",
            "namespace": "${NAMESPACE}"
         },
         "spec": {
            "activeDeadlineSeconds": 1800,
            "backoffLimit": 9999,
            "completions": 1,
            "parallelism": 1,
            "template": {
               "metadata": {
                  "labels": {
                     "job": "deploy-letsencrypt"
                  }
               },
               "spec": {
                  "containers": [
                     {
                        "args": "${{SCRIPT_ARGUMENTS}}",
                        "command": [
                           "deploy-letsencrypt.sh"
                        ],
                        "env": [
                           {
                              "name": "NAMESPACE",
                              "value": "${NAMESPACE}"
                           },
                           {
                              "name": "DRY_RUN",
                              "value": "${DRY_RUN}"
                           },
                           {
                              "name": "FORCE_REDEPLOY",
                              "value": "${FORCE_REDEPLOY}"
                           },
                           {
                              "name": "REPLACE_SECRETS",
                              "value": "${REPLACE_SECRETS}"
                           },
                           {
                              "name": "LETSENCRYPT_REPOSITORY",
                              "value": "${LETSENCRYPT_REPOSITORY}"
                           },
                           {
                              "name": "LETSENCRYPT_REVISION",
                              "value": "${LETSENCRYPT_REVISION}"
                           },
                           {
                              "name": "LETSENCRYPT_ENVIRONMENT",
                              "value": "${LETSENCRYPT_ENVIRONMENT}"
                           },
                           {
                              "name": "PROJECTS_TO_MONITOR",
                              "value": "${PROJECTS_TO_MONITOR}"
                           }
                        ],
                        "image": "${JOB_IMAGE}",
                        "name": "deploy-sdi-registry"
                     }
                  ],
                  "restartPolicy": "OnFailure",
                  "serviceAccountName": "sdi-observer"
               }
            }
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ServiceAccount",
         "metadata": {
            "labels": {
               "app": "sdi-observer",
               "created-by": "letsencrypt-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         }
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRoleBinding",
         "metadata": {
            "labels": {
               "created-by": "letsencrypt-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-admin-in-${NAMESPACE}"
         },
         "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "admin"
         },
         "subjects": [
            {
               "kind": "ServiceAccount",
               "name": "sdi-observer",
               "namespace": "${NAMESPACE}"
            }
         ]
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRole",
         "metadata": {
            "labels": {
               "created-by": "letsencrypt-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "rules": [
            {
               "apiGroups": [
                  "config.openshift.io"
               ],
               "resources": [
                  "ingresses",
                  "clusteroperators"
               ],
               "verbs": [
                  "get",
                  "list",
                  "watch"
               ]
            },
            {
               "apiGroups": [
                  ""
               ],
               "resources": [
                  "namespaces"
               ],
               "verbs": [
                  "get",
                  "list",
                  "watch",
                  "patch",
                  "update",
                  "delete"
               ]
            }
         ]
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRoleBinding",
         "metadata": {
            "labels": {
               "created-by": "letsencrypt-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "subjects": [
            {
               "kind": "ServiceAccount",
               "name": "sdi-observer",
               "namespace": "${NAMESPACE}"
            }
         ]
      },
      {
         "apiVersion": "build.openshift.io/v1",
         "kind": "BuildConfig",
         "metadata": {
            "labels": {
               "created-by": "letsencrypt-deploy",
               "deploymentconfig": "sdi-observer",
               "sdi-observer/version": "0.1.27"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         },
         "spec": {
            "output": {
               "to": {
                  "kind": "ImageStreamTag",
                  "name": "sdi-observer:0.1.27-ocp${OCP_MINOR_RELEASE}"
               }
            },
            "runPolicy": "Serial",
            "source": {
               "dockerfile": "FROM openshift/cli:latest\nLABEL maintainer=\"Michal Minář <miminar@redhat.com>\"\nRUN dnf update -y --skip-broken --nobest --disableplugin=subscription-manager ||:\n# TODO: jq is not yet available in EPEL-8\n# make sure to use epel (jq 1.6) instead of rhel repository (jq 1.5)\nRUN dnf install -y --disableplugin=subscription-manager \\\n  https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \\\n /usr/bin/crb enable && \\\n dnf install --disableplugin=subscription-manager --disablerepo=\\* --enablerepo=epel -y jq\nRUN dnf install -y --disableplugin=subscription-manager \\\n    https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && \\\n  dnf install -y --disableplugin=subscription-manager \\\n    parallel procps-ng bc git httpd-tools && dnf clean all -y && \\\n  rm -rf /var/cache/yum /var/cache/dnf\n# TODO: determine OCP version from environment\nRUN cd tmp; \\\n  curl -L -O https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${OCP_MINOR_RELEASE}/openshift-client-linux.tar.gz; \\\n  curl -L -O https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${OCP_MINOR_RELEASE}/sha256sum.txt\n# verify the downloaded tar\nRUN /bin/bash -c 'f=/tmp/openshift-client-linux.tar.gz; \\\n  got=\"$(awk '\"'\"'{print $1}'\"'\"' <(sha256sum \"$f\"))\"; \\\n  exp=\"$(awk '\"'\"'/openshift-client-linux-/ {print $1}'\"'\"' /tmp/sha256sum.txt | head -n 1)\"; \\\n  if [[ \"$got\" != \"$exp\" ]]; then printf \\\n    '\"'\"'Unexpected hashsum of %s (expected \"%s\", got \"%s\")\\n!'\"'\"' \"$f\" \"$exp\" \"$got\" >&2; \\\n    exit 1; \\\n  fi'\nRUN /bin/bash -c 'tar -C /usr/local/bin/ -xzvf /tmp/openshift-client-linux.tar.gz -T <(printf oc)'\nRUN rm -rfv /tmp/*\n# TODO: verify signatures as well\nRUN mkdir -p /usr/local/bin /usr/local/share/openshift-acme\nRUN git clone --depth 5 --single-branch \\\n  --branch ${LETSENCRYPT_REVISION} \\\n  ${LETSENCRYPT_REPOSITORY} /usr/local/share/openshift-acme\nRUN git clone --depth 5 --single-branch \\\n  --branch ${SDI_OBSERVER_GIT_REVISION} \\\n  ${SDI_OBSERVER_REPOSITORY} /usr/local/share/sap-data-intelligence\nRUN for bin in observer.sh deploy-registry.sh deploy-letsencrypt.sh; do \\\n      cp -lv $(find /usr/local/share/sap-data-intelligence \\\n                -type f -executable -name \"$bin\") \\\n        /usr/local/bin/$bin; \\\n      chmod a+rx /usr/local/bin/$bin; \\\n    done\nRUN ln -s /usr/local/share/sap-data-intelligence /usr/local/share/sdi\nWORKDIR /usr/local/share/sdi\nCMD [\"/usr/local/bin/observer.sh\"]"
            },
            "strategy": {
               "dockerStrategy": {
                  "from": {
                     "kind": "ImageStreamTag",
                     "name": "ubi9:latest"
                  },
                  "imageOptimizationPolicy": "SkipLayers",
                  "pullSecret": {
                     "name": "${REDHAT_REGISTRY_SECRET_NAME}"
                  }
               }
            },
            "triggers": [
               {
                  "type": "ImageChange"
               },
               {
                  "type": "ConfigChange"
               }
            ]
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ImageStream",
         "metadata": {
            "labels": {
               "created-by": "letsencrypt-deploy",
               "sdi-observer/version": "0.1.27"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         },
         "spec": null,
         "status": {
            "dockerImageRepository": ""
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ImageStream",
         "metadata": {
            "labels": {
               "created-by": "letsencrypt-deploy",
               "sdi-observer/version": "0.1.27"
            },
            "name": "ubi9",
            "namespace": "${NAMESPACE}"
         },
         "spec": {
            "lookupPolicy": {
               "local": true
            },
            "tags": [
               {
                  "from": {
                     "kind": "DockerImage",
                     "name": "registry.redhat.io/ubi9/ubi:latest"
                  },
                  "importPolicy": {
                     "scheduled": true
                  },
                  "name": "latest",
                  "referencePolicy": {
                     "type": "Source"
                  }
               }
            ]
         },
         "status": {
            "dockerImageRepository": ""
         }
      }
   ],
   "parameters": [
      {
         "description": "The desired namespace to deploy resources to. Defaults to the current one.\n",
         "name": "NAMESPACE",
         "required": true
      },
      {
         "description": "If set to true, no action will be performed. The pod will just print what would have been executed.",
         "name": "DRY_RUN",
         "required": false,
         "value": "false"
      },
      {
         "description": "Whether to forcefully replace existing objects and configuration files. To replace exising secrets as well, RECREATE_SECRETS needs to be set.",
         "name": "FORCE_REDEPLOY",
         "required": false,
         "value": "false"
      },
      {
         "description": "Whether to replace secrets like SDI Registry's htpasswd file if they exist already.",
         "name": "REPLACE_SECRETS",
         "required": false,
         "value": "false"
      },
      {
         "description": "(deprecated since 0.1.13) Unless given, a local copy will be used.Defaults to a local check out. Example value: https://github.com/tnozicka/openshift-acme\n",
         "name": "LETSENCRYPT_REPOSITORY",
         "required": false,
         "value": null
      },
      {
         "description": "(deprecated since 0.1.13) Revision of letsencrypt repository to check out.",
         "name": "LETSENCRYPT_REVISION",
         "required": false,
         "value": "master"
      },
      {
         "description": "(deprecated since 0.1.13) Either \"live\" or \"staging\". Use the latter when debugging SDI Observer's deployment.",
         "name": "LETSENCRYPT_ENVIRONMENT",
         "required": false,
         "value": "live"
      },
      {
         "description": "Additional projects to monitor separated by commas. The controller will be granted\npermission to manage routes in the projects. The job needs to be able to create roles\nand rolebindings in all the projects listed.\n",
         "name": "PROJECTS_TO_MONITOR",
         "required": false
      },
      {
         "description": "Pull specification of the built SDI Observer image.\n",
         "name": "JOB_IMAGE",
         "required": true,
         "value": null
      },
      {
         "description": "Arguments for job's script. Passed as a json array of strings.\n",
         "name": "SCRIPT_ARGUMENTS",
         "required": false,
         "value": "[\"--wait\"]"
      },
      {
         "description": "Name of the secret with credentials for registry.redhat.io registry. Please visit https://access.redhat.com/terms-based-registry/ to obtain the OpenShift secret. For more details, please refer to https://access.redhat.com/RegistryAuthentication",
         "name": "REDHAT_REGISTRY_SECRET_NAME",
         "required": true
      },
      {
         "description": "Minor release of OpenShift Container Platform (e.g. 4.2). This value must match the OCP server version. The biggest tolerated difference between the versions is 1 in the second digit.",
         "name": "OCP_MINOR_RELEASE",
         "required": true,
         "value": "4.8"
      },
      {
         "description": "URL of SDI Observer's git repository to clone into sdi-observer image.",
         "name": "SDI_OBSERVER_REPOSITORY",
         "required": true,
         "value": "https://github.com/redhat-sap/sap-data-intelligence"
      },
      {
         "description": "Revision (e.g. tag, commit or branch) of SDI Observer's git repository to check out.",
         "name": "SDI_OBSERVER_GIT_REVISION",
         "required": true,
         "value": "master"
      }
   ]
}
