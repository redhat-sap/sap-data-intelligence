{
   "apiVersion": "template.openshift.io/v1",
   "kind": "Template",
   "message": "To get the credentials to access the registry, execute the following:\n\n    # oc get -o go-template='{{index .data \".htpasswd.raw\"}}' \\\n      secret/container-image-registry-htpasswd | base64 -d\n    user-62hsyd:2JFqD8SJqYeLvecNdh3BvAFfKwhJF0De\n\nTo get the registry pull spec exposed by a route:\n\n    # oc get route -n sdi-observer container-image-registry -o jsonpath='{.spec.host}{\"\\n\"}'\n    container-image-registry-sdi-observer.apps.ocp.example.org\n\nTo get the default ceritificate authority unless overridden by a parameter (requires jq of\nversion 1.6 or higher):\n\n    # oc get secret -n openshift-ingress-operator -o json router-ca | \\\n        jq -r '.data as $d | $d | keys[] | select(test(\"\\\\.crt$\")) | $d[.]' | \\\n        base64 -d >router-ca.crt\n\nTo verify the connection via a route:\n\n    # curl -I --cacert ./router-ca.crt --user user-62hsyd:2JFqD8SJqYeLvecNdh3BvAFfKwhJF0De \\\n        https://container-image-registry-sdi-observer.apps.ocp.example.org/v2/\n    HTTP/1.1 200 OK\n    Content-Length: 2\n    Content-Type: application/json; charset=utf-8\n    Docker-Distribution-Api-Version: registry/2.0\n    Date: Thu, 22 Apr 2021 13:26:26 GMT\n    Set-Cookie: d22d6ce08115a899cf6eca6fd53d84b4=97c8742ee7d80fd9461b4b5afc1218f4; path=/; HttpOnly; Secure; SameSite=None\n    Cache-control: private\n\nTo list the images in the registry:\n\n    # curl --silent --cacert ./router-ca.crt \\\n        --user user-62hsyd:2JFqD8SJqYeLvecNdh3BvAFfKwhJF0De \\\n        https://container-image-registry-sdi-observer.apps.ocp.example.org/v2/_catalog | jq\n    {\n      \"repositories\": [\n        \"com.sap.bds.docker/storagegateway\",\n        \"com.sap.datahub.linuxx86_64/app-base\",\n        \"com.sap.datahub.linuxx86_64/app-data\",\n    ...\n\nTo check registry's storage usage:\n\n    # oc rsh -n sdi-observer dc/container-image-registry df /var/lib/registry\n    Filesystem  1K-blocks     Used Available Use% Mounted on\n    10...60     125829120 28389376  97439744  23% /var/lib/registry\n",
   "metadata": {
      "annotations": {
         "description": "The template deploys a container image registry pod suitable to host SAP Data Intelligence\nimages mirrored from SAP's registry. It is also supported for graph images built and\nscheduled by Data Intelligence's Pipeline Modeler. By default, the registry requires\nauthentication. It is exposed by a OpenShift Ingress controller as an encrypted route. The\nroute is secured by a certificate signed by the Ingress certificate authority. The\nregistry can be accessed by SAP Software Lifecycle Bridge and Pipeline Modeler only via\nthis route.\n\nIt is recommended to choose as a storage class the one supporting RedWriteMany access mode\nif there is one. In such case, SDI_REGISTRY_VOLUME_ACCESS_MODE parameter shall be set to\nReadWriteMany.\n\nUnless explicitly specified in template parameters, access credentials will be generated.\n",
         "openshift.io/display-name": "Job to deploy a container image registry.\n",
         "openshift.io/documentation-url": "https://access.redhat.com/articles/4324391",
         "openshift.io/provider-display-name": "Red Hat, Inc.",
         "sdi-observer/version": "0.1.27"
      },
      "name": "deploy-registry"
   },
   "objects": [
      {
         "apiVersion": "batch/v1",
         "kind": "Job",
         "metadata": {
            "labels": {
               "sdi-observer/version": "0.1.27"
            },
            "name": "deploy-registry",
            "namespace": "${NAMESPACE}"
         },
         "spec": {
            "activeDeadlineSeconds": 1800,
            "backoffLimit": 9999,
            "completions": 1,
            "parallelism": 1,
            "template": {
               "metadata": {
                  "labels": {
                     "job": "deploy-registry"
                  }
               },
               "spec": {
                  "containers": [
                     {
                        "args": "${{SCRIPT_ARGUMENTS}}",
                        "command": [
                           "deploy-registry.sh"
                        ],
                        "env": [
                           {
                              "name": "NAMESPACE",
                              "value": "${NAMESPACE}"
                           },
                           {
                              "name": "DRY_RUN",
                              "value": "${DRY_RUN}"
                           },
                           {
                              "name": "FORCE_REDEPLOY",
                              "value": "${FORCE_REDEPLOY}"
                           },
                           {
                              "name": "REPLACE_SECRETS",
                              "value": "${REPLACE_SECRETS}"
                           },
                           {
                              "name": "REPLACE_PERSISTENT_VOLUME_CLAIMS",
                              "value": "${REPLACE_PERSISTENT_VOLUME_CLAIMS}"
                           },
                           {
                              "name": "REGISTRY",
                              "value": "${REGISTRY}"
                           },
                           {
                              "name": "SDI_REGISTRY_USERNAME",
                              "value": "${SDI_REGISTRY_USERNAME}"
                           },
                           {
                              "name": "SDI_REGISTRY_PASSWORD",
                              "value": "${SDI_REGISTRY_PASSWORD}"
                           },
                           {
                              "name": "SDI_REGISTRY_AUTHENTICATION",
                              "value": "${SDI_REGISTRY_AUTHENTICATION}"
                           },
                           {
                              "name": "SDI_REGISTRY_STORAGE_CLASS_NAME",
                              "value": "${SDI_REGISTRY_STORAGE_CLASS_NAME}"
                           },
                           {
                              "name": "SDI_REGISTRY_HTPASSWD_SECRET_NAME",
                              "value": "${SDI_REGISTRY_HTPASSWD_SECRET_NAME}"
                           },
                           {
                              "name": "SDI_REGISTRY_ROUTE_HOSTNAME",
                              "value": "${SDI_REGISTRY_ROUTE_HOSTNAME}"
                           },
                           {
                              "name": "SDI_REGISTRY_HTTP_SECRET",
                              "value": "${SDI_REGISTRY_HTTP_SECRET}"
                           },
                           {
                              "name": "SDI_REGISTRY_VOLUME_CAPACITY",
                              "value": "${SDI_REGISTRY_VOLUME_CAPACITY}"
                           },
                           {
                              "name": "SDI_REGISTRY_VOLUME_ACCESS_MODE",
                              "value": "${SDI_REGISTRY_VOLUME_ACCESS_MODE}"
                           },
                           {
                              "name": "EXPOSE_WITH_LETSENCRYPT",
                              "value": "${EXPOSE_WITH_LETSENCRYPT}"
                           },
                           {
                              "name": "REDHAT_REGISTRY_SECRET_NAME",
                              "value": "${REDHAT_REGISTRY_SECRET_NAME}"
                           },
                           {
                              "name": "OCP_MINOR_RELEASE",
                              "value": "${OCP_MINOR_RELEASE}"
                           },
                           {
                              "name": "SDI_OBSERVER_REPOSITORY",
                              "value": "${SDI_OBSERVER_REPOSITORY}"
                           },
                           {
                              "name": "SDI_OBSERVER_GIT_REVISION",
                              "value": "${SDI_OBSERVER_GIT_REVISION}"
                           }
                        ],
                        "image": "${JOB_IMAGE}",
                        "name": "deploy-sdi-registry"
                     }
                  ],
                  "restartPolicy": "OnFailure",
                  "serviceAccountName": "sdi-observer"
               }
            }
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ServiceAccount",
         "metadata": {
            "labels": {
               "app": "sdi-observer",
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         }
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRoleBinding",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-admin-in-${NAMESPACE}"
         },
         "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "admin"
         },
         "subjects": [
            {
               "kind": "ServiceAccount",
               "name": "sdi-observer",
               "namespace": "${NAMESPACE}"
            }
         ]
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRole",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "rules": [
            {
               "apiGroups": [
                  "config.openshift.io"
               ],
               "resources": [
                  "ingresses",
                  "clusteroperators"
               ],
               "verbs": [
                  "get",
                  "list",
                  "watch"
               ]
            },
            {
               "apiGroups": [
                  ""
               ],
               "resources": [
                  "namespaces"
               ],
               "verbs": [
                  "get",
                  "list",
                  "watch",
                  "patch",
                  "update",
                  "delete"
               ]
            }
         ]
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRoleBinding",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "subjects": [
            {
               "kind": "ServiceAccount",
               "name": "sdi-observer",
               "namespace": "${NAMESPACE}"
            }
         ]
      },
      {
         "apiVersion": "build.openshift.io/v1",
         "kind": "BuildConfig",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer",
               "sdi-observer/version": "0.1.27"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         },
         "spec": {
            "output": {
               "to": {
                  "kind": "ImageStreamTag",
                  "name": "sdi-observer:0.1.27-ocp${OCP_MINOR_RELEASE}"
               }
            },
            "runPolicy": "Serial",
            "source": {
               "dockerfile": "FROM openshift/cli:latest\nLABEL maintainer=\"Michal Minář <miminar@redhat.com>\"\nRUN dnf update -y --skip-broken --nobest --disableplugin=subscription-manager ||:\n# TODO: jq is not yet available in EPEL-8\n# make sure to use epel (jq 1.6) instead of rhel repository (jq 1.5)\nRUN dnf install -y --disableplugin=subscription-manager \\\n  https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \\\n /usr/bin/crb enable && \\\n dnf install --disableplugin=subscription-manager --enablerepo=epel -y jq\nRUN dnf install -y --disableplugin=subscription-manager \\\n    https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && \\\n  dnf install -y --disableplugin=subscription-manager \\\n    parallel procps-ng bc git httpd-tools && dnf clean all -y && \\\n  rm -rf /var/cache/yum /var/cache/dnf\n# TODO: determine OCP version from environment\nRUN cd tmp; \\\n  curl -L -O https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${OCP_MINOR_RELEASE}/openshift-client-linux.tar.gz; \\\n  curl -L -O https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${OCP_MINOR_RELEASE}/sha256sum.txt\n# verify the downloaded tar\nRUN /bin/bash -c 'f=/tmp/openshift-client-linux.tar.gz; \\\n  got=\"$(awk '\"'\"'{print $1}'\"'\"' <(sha256sum \"$f\"))\"; \\\n  exp=\"$(awk '\"'\"'/openshift-client-linux-/ {print $1}'\"'\"' /tmp/sha256sum.txt | head -n 1)\"; \\\n  if [[ \"$got\" != \"$exp\" ]]; then printf \\\n    '\"'\"'Unexpected hashsum of %s (expected \"%s\", got \"%s\")\\n!'\"'\"' \"$f\" \"$exp\" \"$got\" >&2; \\\n    exit 1; \\\n  fi'\nRUN /bin/bash -c 'tar -C /usr/local/bin/ -xzvf /tmp/openshift-client-linux.tar.gz -T <(printf oc)'\nRUN rm -rfv /tmp/*\n# TODO: verify signatures as well\nRUN mkdir -p /usr/local/bin /usr/local/share/openshift-acme\nRUN git clone --depth 5 --single-branch \\\n  --branch ${LETSENCRYPT_REVISION} \\\n  ${LETSENCRYPT_REPOSITORY} /usr/local/share/openshift-acme\nRUN git clone --depth 5 --single-branch \\\n  --branch ${SDI_OBSERVER_GIT_REVISION} \\\n  ${SDI_OBSERVER_REPOSITORY} /usr/local/share/sap-data-intelligence\nRUN for bin in observer.sh deploy-registry.sh deploy-letsencrypt.sh; do \\\n      cp -lv $(find /usr/local/share/sap-data-intelligence \\\n                -type f -executable -name \"$bin\") \\\n        /usr/local/bin/$bin; \\\n      chmod a+rx /usr/local/bin/$bin; \\\n    done\nRUN ln -s /usr/local/share/sap-data-intelligence /usr/local/share/sdi\nWORKDIR /usr/local/share/sdi\nCMD [\"/usr/local/bin/observer.sh\"]"
            },
            "strategy": {
               "dockerStrategy": {
                  "from": {
                     "kind": "ImageStreamTag",
                     "name": "ubi9:latest"
                  },
                  "imageOptimizationPolicy": "SkipLayers",
                  "pullSecret": {
                     "name": "${REDHAT_REGISTRY_SECRET_NAME}"
                  }
               }
            },
            "triggers": [
               {
                  "type": "ImageChange"
               },
               {
                  "type": "ConfigChange"
               }
            ]
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ImageStream",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "sdi-observer/version": "0.1.27"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         },
         "spec": null,
         "status": {
            "dockerImageRepository": ""
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ImageStream",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "sdi-observer/version": "0.1.27"
            },
            "name": "ubi9",
            "namespace": "${NAMESPACE}"
         },
         "spec": {
            "lookupPolicy": {
               "local": true
            },
            "tags": [
               {
                  "from": {
                     "kind": "DockerImage",
                     "name": "registry.redhat.io/ubi9/ubi:latest"
                  },
                  "importPolicy": {
                     "scheduled": true
                  },
                  "name": "latest",
                  "referencePolicy": {
                     "type": "Source"
                  }
               }
            ]
         },
         "status": {
            "dockerImageRepository": ""
         }
      }
   ],
   "parameters": [
      {
         "description": "The desired namespace to deploy resources to. Defaults to the current one.\n",
         "name": "NAMESPACE",
         "required": true
      },
      {
         "description": "If set to true, no action will be performed. The pod will just print what would have been executed.",
         "name": "DRY_RUN",
         "required": false,
         "value": "false"
      },
      {
         "description": "Whether to forcefully replace existing objects and configuration files. To replace exising secrets as well, RECREATE_SECRETS needs to be set.",
         "name": "FORCE_REDEPLOY",
         "required": false,
         "value": "false"
      },
      {
         "description": "Whether to replace secrets like SDI Registry's htpasswd file if they exist already.",
         "name": "REPLACE_SECRETS",
         "required": false,
         "value": "false"
      },
      {
         "description": "Whether to replace existing persistent volume claims like the one belonging to SDI Registry.",
         "name": "REPLACE_PERSISTENT_VOLUME_CLAIMS",
         "required": false,
         "value": "false"
      },
      {
         "description": "(deprecated since 0.1.13) The registry to mark as insecure. If not given, it will be determined from the installer-config secret in the SDI_NAMESPACE. If DEPLOY_SDI_REGISTRY is set to \"true\", this variable will be used as the container image registry's hostname when creating the corresponding route.",
         "name": "REGISTRY",
         "required": false
      },
      {
         "description": "Will be used to generate htpasswd file to provide authentication data to the SDI Registry service as long as SDI_REGISTRY_HTPASSWD_SECRET_NAME does not exist or REPLACE_SECRETS is \"true\".",
         "from": "user-[a-z0-9]{6}",
         "generate": "expression",
         "name": "SDI_REGISTRY_USERNAME",
         "required": false
      },
      {
         "description": "Will be used to generate htpasswd file to provide authentication data to the SDI Registry service as long as SDI_REGISTRY_HTPASSWD_SECRET_NAME does not exist or REPLACE_SECRETS is \"true\".",
         "from": "[a-zA-Z0-9]{32}",
         "generate": "expression",
         "name": "SDI_REGISTRY_PASSWORD",
         "required": false
      },
      {
         "description": "Choose the authentication method of the SDI Registry. Value \"none\" disables authentication altogether. Defaults to \"basic\" where the provided htpasswd file is used to gate the incoming authentication requests.",
         "name": "SDI_REGISTRY_AUTHENTICATION",
         "required": false,
         "value": "basic"
      },
      {
         "description": "Unless given, the default storage class will be used.",
         "name": "SDI_REGISTRY_STORAGE_CLASS_NAME",
         "required": false
      },
      {
         "description": "A secret with htpasswd file with authentication data for the sdi image container If given and the secret exists, it will be used instead of SDI_REGISTRY_USERNAME and SDI_REGISTRY_PASSWORD.",
         "name": "SDI_REGISTRY_HTPASSWD_SECRET_NAME",
         "required": true,
         "value": "container-image-registry-htpasswd"
      },
      {
         "description": "Desired hostname of the exposed registry service. Defaults to container-image-registry-<NAMESPACE>-apps.<cluster_name>.<base_domain>",
         "name": "SDI_REGISTRY_ROUTE_HOSTNAME",
         "required": false
      },
      {
         "description": "A random piece of data used to sign state that may be stored with the client to protect against tampering. If omitted, the registry will automatically generate a secret when it starts. If using multiple replicas of registry, the secret MUST be the same for all of them.",
         "from": "[a-zA-Z0-9]{32}",
         "generate": "expression",
         "name": "SDI_REGISTRY_HTTP_SECRET",
         "required": false
      },
      {
         "description": "Volume space available for container images (e.g. 120Gi).",
         "name": "SDI_REGISTRY_VOLUME_CAPACITY",
         "required": true,
         "value": "120Gi"
      },
      {
         "description": "If the given SDI_REGISTRY_STORAGE_CLASS_NAME or the default storate class supports \"ReadWriteMany\" (\"RWX\") access mode, please change this to \"ReadWriteMany\".",
         "name": "SDI_REGISTRY_VOLUME_ACCESS_MODE",
         "required": true,
         "value": "ReadWriteOnce"
      },
      {
         "description": "(deprecated since 0.1.13) Whether to expose routes annotated for letsencrypt controller. Requires project admin role attached to the sdi-observer service account. Letsencrypt controller must be deployed either via this observer or cluster-wide for this to have an effect.",
         "name": "EXPOSE_WITH_LETSENCRYPT",
         "required": false,
         "value": "false"
      },
      {
         "description": "Name of the secret with credentials for registry.redhat.io registry. Please visit https://access.redhat.com/terms-based-registry/ to obtain the OpenShift secret. For more details, please refer to https://access.redhat.com/RegistryAuthentication",
         "name": "REDHAT_REGISTRY_SECRET_NAME",
         "required": true
      },
      {
         "description": "Minor release of OpenShift Container Platform (e.g. 4.2). This value must match the OCP server version. The biggest tolerated difference between the versions is 1 in the second digit.",
         "name": "OCP_MINOR_RELEASE",
         "required": true,
         "value": "4.8"
      },
      {
         "description": "URL of SDI Observer's git repository to clone into sdi-observer image.",
         "name": "SDI_OBSERVER_REPOSITORY",
         "required": true,
         "value": "https://github.com/redhat-sap/sap-data-intelligence"
      },
      {
         "description": "Revision (e.g. tag, commit or branch) of SDI Observer's git repository to check out.",
         "name": "SDI_OBSERVER_GIT_REVISION",
         "required": true,
         "value": "master"
      },
      {
         "description": "Pull specification of the built SDI Observer image.\n",
         "name": "JOB_IMAGE",
         "required": true,
         "value": null
      },
      {
         "description": "Arguments for job's script. Passed as a json array of strings.\n",
         "name": "SCRIPT_ARGUMENTS",
         "required": false,
         "value": "[\"--wait\"]"
      }
   ]
}
